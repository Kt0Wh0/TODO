document.addEventListener("DOMContentLoaded", () => {
    const userId = localStorage.getItem("userId"); // –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const projectsList = document.getElementById("projectList");

    fetch(`http://localhost:8080/project/${userId}`)
        .then(response => response.json())
        .then(data => {
            data.forEach(project => {
                const projectElement = document.createElement("div");
                projectElement.classList.add("project");

                // —É–¥–∞–ª–µ–Ω–∏—è
                const deleteBtn = document.createElement("span");
                deleteBtn.innerHTML = "&#10060;";
                deleteBtn.classList.add("delete-btn");
                deleteBtn.onclick = () => deleteProject(project.id, projectElement);

                // –æ–±–Ω–æ–≤–∞
                const updBtn = document.createElement("span");
                updBtn.innerHTML = "üîÑ";
                updBtn.classList.add("upd-btn");
                updBtn.onclick = () => openProjectUpdForm(project.id) ;

                // –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                const addTask = document.createElement("span");
                addTask.innerHTML = "‚ûï";
                addTask.classList.add("add-task");
                addTask.onclick = () => openTaskAdd(project.id) ;

                projectElement.ondblclick = () => loadProjectTasks(project.id, projectElement);

                projectElement.innerHTML = `
                    <h2>${project.name}</h2>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${project.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
                    <p><strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong> ${project.startDate || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
                    <p><strong>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> ${project.endDate || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
                `;
                projectElement.appendChild(deleteBtn);
                projectElement.appendChild(updBtn);
                projectElement.appendChild(addTask);
                projectsList.appendChild(projectElement);
            });
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error));
});


function deleteProject(projectId, projectElement) {
    fetch(`http://localhost:8080/project/${projectId}`, {
        method: "DELETE",
    })
        .then(response => {
            if (response.ok) {
                projectElement.remove(); // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ DOM
            } else {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞");
            }
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error));
}

function openProjectForm() {
    document.getElementById("modal").style.display = "block";
}

function closeProjectForm() {
    document.getElementById("modal").style.display = "none";
}

function openProjectUpdForm(projectId) {
    document.getElementById("updateProjectId").value = projectId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
    document.getElementById("modalUpd").style.display = "block";
}

function closeProjectUpdForm() {
    document.getElementById("modalUpd").style.display = "none";
}

function openTaskAdd(projectId) {
    console.log("1 " + projectId)
    document.getElementById("ProjectId").value = projectId;
    document.getElementById("addTask").style.display = "block";
}

function closeTaskAdd() {
    document.getElementById("addTask").style.display = "none";
}



function saveProject() {
    const userId = localStorage.getItem("userId");
    let name = document.getElementById("name").value;
    let description = document.getElementById("description").value;
    let startDate = document.getElementById("startDate").value;
    let endDate = document.getElementById("endDate").value;

    let project = {
        name: name,
        description: description,
        startDate: startDate,
        endDate: endDate
    };

    console.log("–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç:", project); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏

    fetch(`http://localhost:8080/project/${userId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(project)
    }).then(response => response.json()).then(data => console.log("–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", data));

    closeProjectForm(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
}

function updateProject() {
    const id = document.getElementById("updateProjectId").value;
    let name = document.getElementById("nameUpd").value;
    let description = document.getElementById("descriptionUpd").value;
    let startDate = document.getElementById("startDateUpd").value;
    let endDate = document.getElementById("endDateUpd").value;

    let project = {
        name: name,
        description: description,
        startDate: startDate,
        endDate: endDate
    };

    fetch(`http://localhost:8080/project/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(project)
    }).then(response => response.json()).then(data => console.log("–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", data));

    closeProjectUpdForm();

}

function loadProjectTasks(projectId, projectElement) {
    fetch(`http://localhost:8080/task/${projectId}`)
        .then(response => response.json())
        .then(tasks => {
            let tasksContainer = projectElement.querySelector(".tasks");

            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º
            if (tasksContainer) {
                tasksContainer.style.display = tasksContainer.style.display === "none" ? "block" : "none";
                return;
            }

            // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            tasksContainer = document.createElement("div");
            tasksContainer.classList.add("tasks");

            if (tasks.length === 0) {
                tasksContainer.innerHTML = "<p>–ù–µ—Ç –∑–∞–¥–∞—á</p>";
            } else {
                tasks.forEach(task => {
                    const taskElement = document.createElement("div");
                    taskElement.classList.add("task");

                    // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á–∏
                    const taskContent = document.createElement("div");
                    taskContent.classList.add("task-content");
                    taskContent.innerHTML = `
                        <h3>${task.name}</h3>
                        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${task.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
                        <p><strong>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</strong> ${task.endData || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
                    `;

                    //  —É–¥–∞–ª–µ–Ω–∏—è
                    const deleteTaskBtn = document.createElement("span");
                    deleteTaskBtn.innerHTML = "&#10060;";
                    deleteTaskBtn.classList.add("deleteTask-btn");
                    deleteTaskBtn.onclick = () => deleteTask(task.id, taskElement);

                    taskElement.appendChild(taskContent);
                    taskElement.appendChild(deleteTaskBtn);

                    tasksContainer.appendChild(taskElement);
                });

            }

            projectElement.appendChild(tasksContainer);
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:", error));
}

function addTask() {
    const projectId = document.getElementById("ProjectId").value;
    let name = document.getElementById("nameTask").value;
    let description = document.getElementById("descriptionTask").value;
    let endDate = document.getElementById("endDateTask").value;
    console.log("2" + projectId)
    let task = {
        name: name,
        description: description,
        endData: endDate
    };

    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:", task);

    fetch(`http://localhost:8080/task/${projectId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(task)
    }).then(response => response.json()).then(data => console.log("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", data));

    closeTaskAdd(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
}

function deleteTask(projectId, taskElement) {
    fetch(`http://localhost:8080/task/${projectId}`, {
        method: "DELETE",
    })
        .then(response => {
            if (response.ok) {
                taskElement.remove();
            } else {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á—Ç");
            }
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error));
}

